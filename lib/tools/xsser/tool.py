
from lib.shell.base import Shell
from lib.shell.exceptions import ShellException
from lib.tools.base import BaseTool
import lib.tools.xsser.exceptions as xsser_exceptions
from lib.tools.xsser.result import XSSerToolResult
from lib.utils.dir import tmp_dir
import logging
log = logging.getLogger(__name__)
class XSSerTool(Shell, BaseTool):

    CMD = "docker exec -it kali /bin/bash -c 'xsser -u {url} -o {output} --Cw {depth}'"
    pass
    


    def __init__(
        self,
        url,
        depth = 2,
        _REPORT_OUT_FILE = tmp_dir(),
    ):
        self._REPORT_OUT_FILE = _REPORT_OUT_FILE
        cmd = self.CMD.format(url=url,  depth=depth, output=_REPORT_OUT_FILE)
        log.info("Running command: %s", cmd)
        super().__init__(cmd)

    
    
    def run(self):
        try:
            super().run()
            return XSSerToolResult.from_file(self._REPORT_OUT_FILE)
        except ShellException as ex:
            raise xsser_exceptions.InvalidUsageException(ex.output)
            


        

