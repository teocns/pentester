import subprocess

from lib.shell.exceptions import ShellException

class Shell:

    def __init__(self, *args, **kwargs) -> None:
        pass
    
    CMD = ''

    # _process: subprocess.Popen 

    # def __init__(self, cmd) -> None:
    #     self._process = subprocess.Popen(['bash', '-c', cmd], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=False)

    # def get_attach_cmd():
    #     raise NotImplementedError()

    
    @classmethod
    def run(cls, input = None):
        if input is None:
            if not cls.CMD:
                raise Exception('No shell command')
            input = cls.CMD
        
        result = None
        try:
            subprocess.check_output(input, shell=True)
        except subprocess.CalledProcessError as e:
            raise ShellException(e.output)

    # @classmethod
    # def attach(cls, host='localhost'):
    #     if host != 'localhost':
    #         # SSH logic
    #         raise NotImplementedError("Must implement SSH connection logic")
        
    #     return cls(cls.ATTACH_CMD)


# docker needs to be added in $PYTHONPATH







