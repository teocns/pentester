

from .mixins.run import RunMixin 
from .mixins.search import SearchMixin
import pymetasploit3.msfrpc 

class MsfModule(
    RunMixin,
    SearchMixin,
    pymetasploit3.msfrpc.MsfModule,
):
    """
    Base wrapper around MsfRPC
    """

    def __init__(self, name):
        #MsfModuleBase.__init__(self, name)
        #cls = make_module_cls(*type_and_name(name))
        super().__init__(client, *type_and_name(name))
        
    def __repr__(self) -> str:
        return '<{} {}>'.format(self.__class__.__name__, self.codename)

    
    # def __new__(cls, name):
    #     return make_module_cls(*type_and_name(name))


    # def __repr__(self) -> str:
    #     return "<{name} {date} {args}>".format(
    #         name=self.fullname,
    #         description=self.description
    #     )

    
    def parse(self, output):
        log.critical("No `parse` method configured")
        log.debug(output)
        return output
        #raise NotImplementedError("`parse` Must be implemented by subclass")
    


from .. import client

from .types import get_type

import logging

log = logging.getLogger(__name__)



def type_and_name(name):
    type = get_type(name)
    just_name = name.split('/',1)[-1]
    return type, just_name



# class MsfModule(
#     MsfModuleBase
# ): 


#     """
#     A factory wrapper around client.modules
#     This is the module class we're going to use across our library.
#     """





    # @property
    # def RHOSTS(self):
    #     return self.options.get("RHOSTS", "")

    # @property
    # def RPORTS(self):
    #     return self.options.get("RPORTS", "")

    # @property
    # def RPORT(self):
    #     return self.options.get("RPORT", "")

    # @property
    # def RHOST(self):
    #     return self.options.get("RHOST", "")

    # @RHOSTS.setter
    # def RHOSTS(self, value):
    #     self.options["RHOSTS"] = value
    #     if "RHOST" in self.options:
    #         del self.options["RHOST"]

    # @RHOST.setter
    # def RHOST(self, value):
    #     self.options["RHOST"] = value
    #     if "RHOSTS" in self.options:
    #         del self.options["RHOSTS"]

    # @RPORTS.setter
    # def RPORTS(self, value):
    #     self.options["RPORTS"] = value
    #     if "RPORT" in self.options:
    #         del self.options["RPORT"]

    # @RPORT.setter
    # def RPORT(self, value):
    #     self.options["RPORT"] = value
    #     if "RPORTS" in self.options:
    #         del self.options["RPORTS"]

