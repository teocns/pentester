
from ...client import client
from .args import ArgsMixin
from ...console import MsfConsole

import logging

log = logging.getLogger(__name__)


import pymetasploit3.msfrpc

class RunMixin(ArgsMixin, pymetasploit3.msfrpc.MsfModule):

    _ARGS = {} # Run options like RHOSTS, LHOSTS, etc
    

    def run(self,host, port = None, /,**kwargs):

        self.prepare(
            host=host,
            port=port,
            **kwargs
        )

        warm_console = kwargs.get('console', None)
        
        
        log.info("Running [{}] against {}:{}".format(
            self.codename,
            host,
            port
        ))
            
        with MsfConsole.attach(warm_console) as console:
            runnable =  lambda: self.parse(console.run_module_with_output(self))
            return self._run(runnable)


    # def prepare(self):
    #     """
    #     Will attempt to manipualte missing params
    #     """
    #     for self.missing_required in self.required:
    #         if self.missing_required == 'RHOSTS':
    #             self.RHOSTS = self.RHOSTS
    #         elif self.missing_required == 'RPORTS':
    #             self.RPORTS = self.RPORTS
    #         else:
    #             breakpoint()
        

    def _run(self,runnable):
        try:
            return runnable()
        except KeyError as keyerr:
            if 'RPORTS' in str(keyerr):
                log.debug("KeyError: {}. Retrying with RPORT".format(keyerr.__repr__()))
                self.RPORT = self.RPORTS
            elif 'RHOSTS' in str(keyerr):
                log.debug("KeyError: {}. Retrying with RHOST".format(keyerr.__repr__()))
                self.RHOST = self.RHOSTS
            return runnable()
        except Exception as ex:
            log.error('Run error for {module}\n{ex}'.format(module=self, ex = ex))


    