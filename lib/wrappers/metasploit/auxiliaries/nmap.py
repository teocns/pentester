from ..module import MsfModule


class nmap(MsfModule):
    type = 'auxiliary'
    name = 'scanner/portscan/syn'
    
    ARGS = {
        "THREADS": 1,
        "CONCURRENCY": 50
    }

    """
    Example output
    -----
    VERBOSE => falseSSL => falseSSLVersion => Auto
    SSLVerifyMode => PEER
    ConnectTimeout => 10
    TCP::max_send_size => 0
    TCP::send_delay => 0
    THREADS => 1
    ShowProgress => true
    ShowProgressPercent => 10
    PORTS => 55553
    TIMEOUT => 1000
    CONCURRENCY => 10
    DELAY => 0
    JITTER => 0
    RHOSTS => 13.37.249.152
    [-] Unknown datastore option: DisablePayloadHandler.
    [+] 13.37.249.152:        - 13.37.249.152:55553 - TCP OPEN
    [*] 13.37.249.152:        - Scanned 1 of 1 hosts (100% complete)
    [*] Auxiliary module execution completed
    """


    @classmethod
    def run(self, host, ports):
        self.ARGS['RHOSTS'] = host
        self.ARGS['PORTS'] = ports
        return super().run()

    def parse(output):
        # print(output)
        # print('\n'*3)
        for line in output.splitlines():
            if line.strip().startswith('[+]'):
                part = line.split(':')[-1] # 55553 - TCP OPEN
                port = part.split('-')[0].strip() # 55553
                state = part.split(' ')[-1].strip() # TCP OPEN
                print ( port, state)