from typing import Union
from ..client import client


import pymetasploit3.msfrpc
import logging

log = logging.getLogger(__name__)

class MsfConsole(pymetasploit3.msfrpc.MsfConsole):
    """
    A wrapper for providing console interfacing with the raw api
    """
    

    # If disabled, will attempt destroy the console when the context is exited
    destroy_on_done = True



    def __init__(self, cid: Union[pymetasploit3.msfrpc.MsfRpcClient, str, int] = None):
        """
        We get an instance of the parent class.
        """
        super().__init__(client, cid)


    @classmethod
    def iter(cls):
        for client in client.consoels.list:
            yield cls.attach(client['id'])


    @classmethod
    def free(cls):
        """
        Returns the first free console
        """
        for console in client.consoles.list:
            if not console['busy']:
                return cls.attach(console.cid)
        return None
    
    @classmethod
    def destroy(cls,cid = None):
        """
        Destroy the console with the given cid
        """
        if isinstance(cls,MsfConsole):
            super().destroy()
        else:
            client.consoles.destroy(cid)


    @classmethod
    def create(cls):
        """
        Creates a new Metasploit console.
        """
        return cls(client)

    @classmethod
    def attach(cls, id) -> None:
        return cls(id)
    

    def __enter__(self, console= None) -> 'MsfConsole':
        return self
    
    
    def __exit__(self, *args,**kwargs):
        pass
