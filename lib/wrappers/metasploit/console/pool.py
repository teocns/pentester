from concurrent.futures import ThreadPoolExecutor
from typing import List
from ..module.base import MsfModule

from multiprocessing.pool import ThreadPool

from . import MsfConsole

from threading import Lock

class MsfConsolePool(ThreadPoolExecutor):

    consoles: List[MsfConsole] = [] 

    _clock = Lock()
    
    @property
    def size(self):
        return self._max_workers

    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

        for _ in range(self._max_workers):
            self.consoles.append(MsfConsole.create())

    def submit(self, module: MsfModule) -> None:
        # Retrieve a console
        with self._clock:
            for console in self.consoles:
                if not console.is_busy():
                    return super().submit(module.run, console=console)

    def __del__(self,):
        for console in self.consoles:
            console.destroy()
        