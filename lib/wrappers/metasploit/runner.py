from typing import Iterable, List

from .context import MsfContext

from .console.pool import MsfConsolePool

from .module import MsfModule
import concurrent.futures

import logging

log = logging.getLogger(__name__)


class MsfModuleRunner:
    """
    Runner class to orchestrate a series of Metasploit attacks (modules) execution.
    """

    context: MsfContext

    def on_item_complete(self, item: MsfModule):
        """
        Things to do when error is received from a module
        """
        pass

    def on_callback(module: MsfModule):
        """
        Things to do when callback is received from a module
        """
        pass

    def run_in_batch(
        self,
        *modules: MsfModule
    ):
        """
        Runs an iterable of Metasploit modules against the context.
        """
        for module in modules:
            module.RPORTS = self.context.RPORTS
            module.RPORTS = self.context.RPORTS

        log.info("Running in batch %s modules", len(modules))
        with MsfConsolePool(10) as pool:
            futures = {pool.submit(module) for module in modules}
            for future in concurrent.futures.as_completed(futures):
                print('Done module:', future.result())

    def __init__(self, context: MsfContext) -> None:
        self.context = context

    def __enter__(self) -> 'MsfModuleRunner':
        return self

    def __exit__(self, *args, **kwargs):
        pass
