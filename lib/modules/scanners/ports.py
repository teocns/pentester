from lib.modules.base import BaseModule
from lib.wrappers.shell import Shell



class PortScanner(BaseModule):
    
    """
    Scan a host for open ports.
    """
    name = "port_scanner"
    
    @classmethod
    def get_result(cls,host, *args, **kwargs):
        return cls.nmap(host)

    """
    Host is up (0.00013s latency).
    Other addresses for localhost (not scanned): ::1
    Not shown: 96 closed tcp ports (conn-refused)
    PORT     STATE SERVICE
    5000/tcp open  upnp
    5432/tcp open  postgresql
    8000/tcp open  http-alt
    9999/tcp open  abyss
    """

    DESIRED_FORMAT = {
        "up": bool,
        "ports": {
            int: {
                "status":"open/closed/filtered",
                "service":""
            }
        }
    }



    
    @classmethod
    def _parse_output(cls,out):
        """
        Parse the output of nmap and return a dict with the parsed data.
        """
        parsed_output = {
            "up": True if "Host is up" in out else False,
            "ports": {

            },
            #"shell_output"
        }
        output_lines = out.strip().split('\n')[4:]
        for line in output_lines:
            if line and is_numeric(line[0]):
                port, status, service = line.split()
                parsed_output["ports"][int(port.split('/')[0])] = {
                    "status": status,
                    "service": service
                }
        return parsed_output

    @classmethod
    def nmap(cls,host):
        result = Shell.run(["nmap","-F", host])

        return cls._parse_output(result)

def is_numeric(s):
    try:
        int(s)
        return True
    except:
        return False

