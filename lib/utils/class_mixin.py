


# from typing import Generic, Iterable, Type, TypeVar, Union


# T = TypeVar("T")

# class ClassMixin:
#     """
#     A factory class that returns a type implementing a set of classes, which aims at improving
#     cooperative subclassing by ensuring __init__ gets invoked on all classes.
#     Usage:
#     ``` 
#     class YourClass (ClassMixin(A,B))
#         ....
#     ```
#     """

#     def __new__(cls, *class_types: Iterable[Generic[T]]) -> Type[T]:
        
#         t = type(
#             f"{class_types[0].__name__}",
#             (*class_types,),
#             {"__init__": cls._chain_init},
#         )

#         t.superclasses = class_types
#         return t

#     def _chain_init(self, *args, **kwargs):
#         for cls in self.superclasses:
#             cls.__init__(self, *args, **kwargs)



# # class ClassMixin:
# #     def __new__(cls, *class_types: Iterable[Generic[T]]) :
        
# #         t = type(
# #             f"{class_types[0].__name__}",
# #             (*class_types,),
# #             {"__init__": cls._chain_init},
# #         )

# #         t.superclasses = class_types
# #         return t

# #     def _chain_init(self, *args, **kwargs):
# #         for cls in self.superclasses:
# #             cls.__init__(self, *args, **kwargs)