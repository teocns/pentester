


# from lib.metasploit.console.pool import MsfConsolePool
# from lib.metasploit.console import MsfConsole
# from lib.metasploit.context import MsfContext
from lib.wrappers.metasploit.module import MsfModule
# from lib.metasploit.runner import MsfModuleRunner


# import rlcompleter
# import pdb
# pdb.Pdb.complete=rlcompleter.Completer(locals()).complete
# pdb.set_trace()

a = MsfModule('auxiliary/gather/ssllabs_scan')


a.run('google.com', '443')





    
# with MetasploitRunner(
#     context=MetasploitContext("8.8.8.8", '443')
# ) as runner:
#     runner.run_in_batch(*modules)


# with MetasploitContext("8.8.8.8", '443') as ctx:
#     ctx.run(
#         *modules
#     )



# from concurrent.futures import ThreadPoolExecutor
# import concurrent.futures
# import random
# import time



# def run_tasks(task, n_workers):

#     with ThreadPoolExecutor(n_workers) as executor:

#         future_result = {executor.submit(task, i) for i in range(10)}

#         print("Running 10 tasks in parallel using", n_workers, "workers")

#         start_time = time.time()

#         for future in concurrent.futures.as_completed(future_result):

#             print("Task finished:", future.result())

#             end_time = time.time()

#         print("All tasks completed in", end_time - start_time, "seconds")



# def task(n):
#     # Sleep randomly between 1 and 4 seconds
#     s = random.randint(1, 5)
#     time.sleep(s)

#     return f"{n} / {s}s"



# run_tasks(task, 5)