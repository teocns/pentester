version: "3.2"
services:
  kali:
    container_name: kali
    hostname: kali
    build:
      context: .
      dockerfile: docker/kali/Dockerfile
    volumes:
      - shared:/usr/src/app
    ports:
      - "55553:55553" # metasploit daemon
    #restart: always
    command: sleep infinity
    #command: celery -A worker worker -l debug
    networks:
      - shared
  tidos:
    container_name: tidos
    hostname: tidos
    build:
      context: .
      dockerfile: docker/tidos/Dockerfile
    #restart: always
    #command: sleep infinity
    command: sleep infinity
    networks:
      - shared

  # proxy:
  #   container_name: proxy
  #   hostname: proxy
  #   build:
  #     context: .
  #     dockerfile: docker/proxy/Dockerfile
  #   #restart: always
  #   volumes:
  #     - volume_proxy:/usr/src/app
  #   ports:
  #     - "9999:80"
  #   command: sleep infinity
  #   networks:
  #     - shared
    
  redis:
    image: redis:alpine
    hostname: redis
    container_name: redis
    ports:
        - "6378:6379"
    volumes:
        - ~/.docker-conf/redis/data/:/data
        - ~/.docker-conf/redis/log/:/logs

  rabbitmq:
    image: rabbitmq:3-management-alpine
    hostname: rabbitmq
    container_name: rabbitmq
    ports:
        - "15672:15672"
        - "5672:5672"
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq


  fpCollector:
    container_name: fpCollector
    build:
      context: .
      dockerfile: docker/webapp/Dockerfile
    command: python webapp/manage.py runserver 0.0.0.0:8000
        
    volumes:
      - shared:/usr/src/app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    environment:
      - POSTGRES_DB=pentester
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - DJANGO_ROOT=/usr/src/app/webapp
    restart: always
    
  webapp_worker:
    container_name: webapp_worker
    build:
      context: .
      dockerfile: docker/webapp/Dockerfile
    command: celery -A webapp --workdir webapp worker -l INFO
    volumes:
      - shared:/usr/src/app
    depends_on:
      - postgres
    environment:
      - POSTGRES_DB=pentester
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - DJANGO_ROOT=/usr/src/app/webapp
    restart: always
  worker:
    container_name: worker
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    command: celery -A worker worker -l debug
    volumes:
      - shared:/usr/src/app
    depends_on:
      # d-requirements:
      #   condition: service_started
      - redis
      - rabbitmq
    environment:
      - POSTGRES_DB=pentester
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - DJANGO_ROOT=/usr/src/app/webapp
    restart: always
  # apache:
  #   image: bitnami/apache:2.4.12-2
  #   ports:
  #     - "8080:80"
  #   restart: always
  #   container_name: apache
  #   hostname: apache
  #   networks:
  #     - shared
  postgres:
    image: postgres:14.4
    ports:
      - "5432:5432"
    environment:
      # - POSTGRES_DB=pentester
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    hostname: postgres
    container_name: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
    restart: always
    networks:
      - shared
      # Resolve to IP 172.19.0.2
      #sudo iptables -t nat -A PREROUTING -p tcp --dport 5432 -j DNAT --to-destination 32.10.23.04:5432


volumes:
  # volume_proxyengine:
  #   driver: local
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: /Users/beyond/dailyTopic/proxyengine
  shared:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /Users/beyond/pentester
  volume_proxy:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /Users/beyond/pentester/proxy



# Create a network shared by all containers
   
networks:
  shared:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.20.0.0/16
          gateway: 173.20.0.1
          ip_range: 173.20.0.0/16
          aux_addresses:
            kali: 173.20.0.2
            postgres: 173.20.0.3
            apache: 173.20.0.4