version: "3.2"
services:
  # kali:
  #   container_name: kali
  #   build:
  #     context: .
  #     dockerfile: docker/kali/Dockerfile
  #   #restart: always
  #   #command: sleep infinity
  #   command: sleep infinity
  # d-workers:
  #   container_name: d-workers
  #   build:
  #     context: .
  #     dockerfile: docker/d-scraper/Dockerfile
  #   volumes:
  #     - volume_server:/usr/src/workersapp
  #   depends_on:
  #     - redis
  #     - rabbitmq
  #   environment:
  #     - REDIS_HOST=redis
  #     - RABBITMQ_HOST=rabbitmq
  #     - POSTGRES_DB=dailytopic
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_HOST=postgres
  #     - POSTGRES_PORT=5432
  #   #restart: always
  #   #command: sleep infinity
  #   command: celery -A workers worker -l debug
  redis:
    image: redis:alpine
    hostname: redis
    ports:
        - "6378:6379"
    volumes:
        - ~/.docker-conf/redis/data/:/data
        - ~/.docker-conf/redis/log/:/logs

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
        - "5673:5672"
        - "15673:15672"
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

  webapp:
    container_name: webapp
    build:
      context: .
      dockerfile: docker/webapp/Dockerfile
    command: python webapp/manage.py runserver 0.0.0.0:8000
    volumes:
      - volume_server:/usr/src/app
    ports:
      - "8000:8000"
    depends_on:
      # d-requirements:
      #   condition: service_started
      postgres:
        condition: service_healthy

    environment:
      - POSTGRES_DB=pentester
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - DJANGO_ROOT=/usr/src/app/webapp
    restart: always
  
  postgres:
    image: postgres
    volumes:
      - .postgres/:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=pentester
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    hostname: d-postgres
    container_name: d-postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
volumes:
  # volume_proxyengine:
  #   driver: local
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: /Users/beyond/dailyTopic/proxyengine
  volume_server:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /Users/beyond/pentester