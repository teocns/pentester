version: "3.2"
services:
  kali:
    container_name: kali
    build:
      context: .
      dockerfile: docker/kali/Dockerfile
    #restart: always
    #command: sleep infinity
    command: sleep infinity
    networks:
      - shared
  redis:
    image: redis:alpine
    hostname: redis
    ports:
        - "6378:6379"
    volumes:
        - ~/.docker-conf/redis/data/:/data
        - ~/.docker-conf/redis/log/:/logs

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
        - "5673:5672"
        - "15673:15672"
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

  webapp:
    container_name: webapp
    build:
      context: .
      dockerfile: docker/webapp/Dockerfile
    command: python webapp/manage.py runserver 0.0.0.0:8000
    volumes:
      - volume_server:/usr/src/app
    ports:
      - "8000:8000"
    depends_on:
      # d-requirements:
      #   condition: service_started
      postgres:
        condition: service_healthy

    environment:
      - POSTGRES_DB=pentester
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - DJANGO_ROOT=/usr/src/app/webapp
    restart: always
  apache:
    image: bitnami/apache:2.4.12-2
    ports:
      - "8080:80"
    restart: always
    container_name: apache
    hostname: apache
    networks:
      - shared
  postgres:
    image: postgres:14.4
    ports:
      - "5432:5432"
    environment:
      # - POSTGRES_DB=pentester
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    hostname: postgres
    container_name: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
    restart: always
    networks:
      - shared
      # Resolve to IP 172.19.0.2
      #sudo iptables -t nat -A PREROUTING -p tcp --dport 5432 -j DNAT --to-destination 32.10.23.04:5432


volumes:
  # volume_proxyengine:
  #   driver: local
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: /Users/beyond/dailyTopic/proxyengine
  volume_server:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /Users/beyond/pentester



# Create a network shared by all containers
   
networks:
  shared:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.20.0.0/16
          gateway: 173.20.0.1
          ip_range: 173.20.0.0/16
          aux_addresses:
            kali: 173.20.0.2
            postgres: 173.20.0.3
            apache: 173.20.0.4